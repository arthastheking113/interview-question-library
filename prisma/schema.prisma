// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Position {
  id                      String @id @default(cuid())
  title                   String
  positionQuestion        PositionQuestion[]
  userId                  String
  user                    User              @relation(fields: [userId], references: [id])
  positionContent         PositionContent?
}

model PositionContent {
  id                      String @id @default(cuid())
  description             String         @db.LongText
  positionId              String         @unique
  position                Position              @relation(fields: [positionId], references: [id])
}


model PositionQuestion {
  id              String @id @default(cuid())
  sortOrder       Int
  questionId      String            
  question        Question          @relation(fields: [questionId], references: [id])
  positionId      String            
  position        Position          @relation(fields: [positionId], references: [id])
}

model Question {
  id                      String            @id @default(cuid())
  title                   String
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  userId                  String
  user                    User              @relation(fields: [userId], references: [id])
  questionContent         QuestionContent?
  tags                    QuestionTag[]
  positionQuestion        PositionQuestion[]
  answer                  Answer[]
}

model QuestionTag {
  id              String            @id @default(cuid())
  questionId      String            
  question        Question          @relation(fields: [questionId], references: [id])
  tagId           String            
  tag             Tag               @relation(fields: [tagId], references: [id])
}

model QuestionContent {
  id         String   @id @default(cuid())
  content    String   @db.LongText
  questionId String   @unique
  question   Question @relation(fields: [questionId], references: [id])
}

model Answer {
  id        String   @id @default(cuid())
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  questionId String   
  question   Question @relation(fields: [questionId], references: [id])
}



model Tag {
  id              String   @id @default(cuid())
  name            String
  questions       QuestionTag[]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  answers       Answer[]
  positions     Position[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
